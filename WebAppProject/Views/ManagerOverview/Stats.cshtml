@model ViewModel

@{
    ViewData["Title"] = "Stats";
}

<h1>Stats</h1>

<!--Columns Chart, Contact apps grouped by transaction type:-->
<div id='layout'>
    <div id='container'>
        <svg />
    </div>
</div>

<!--Dount Chart, Users grouped by enterance MONTH:-->
<div id="month_pie_chart" style="padding-top: 50px"></div>

<!--Columns Chart, Contact apps grouped by transaction type:-->
<script>
    const ContactAppsGroupedByCityJSON = @Html.Raw(ViewData["JSONContactAppsAfterGroupByTransactionTypes"]);
    console.log(ContactAppsGroupedByCityJSON);

    const svg = d3.select('svg');
    const svgContainer = d3.select('#container');

    var margin = 80;
    var width = 1000 - 2 * margin;
    const maxValFromContactApps = Math.max.apply(Math, ContactAppsGroupedByCityJSON.map((obj) => obj.value));
    var height = 600 - 2 * margin;

    const chart = svg.append('g')
        .attr('transform', `translate(${margin}, ${margin})`);

    const xScale = d3.scaleBand()
        .range([0, width])
        .domain(ContactAppsGroupedByCityJSON.map((s) => s.type))
        .padding(0.4)

    const yScale = d3.scaleLinear()
        .range([height, 0])
        .domain([0, maxValFromContactApps]); // Makes the height's grids + maximum value on y axis

    const makeYLines = () => d3.axisLeft()
        .scale(yScale)

    chart.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

    chart.append('g')
        .call(d3.axisLeft(yScale));

    chart.append('g')
        .attr('class', 'grid')
        .call(makeYLines()
            .tickSize(-width, 0, 0)
            .tickFormat('')
        )

    const barGroups = chart.selectAll()
        .data(ContactAppsGroupedByCityJSON)
        .enter()
        .append('g')

    barGroups
        .append('rect')
        .attr('class', 'bar')
        .attr('x', (g) => xScale(g.type))
        .attr('y', (g) => yScale(g.value))
        .attr('height', (g) => height - yScale(g.value))
        .attr('width', xScale.bandwidth())

    barGroups
        .append('text')
        .attr('class', 'value')
        .attr('x', (a) => xScale(a.type) + xScale.bandwidth() / 2)
        .attr('y', (a) => yScale(a.value) + 30)
        .attr('text-anchor', 'middle')
        .text((a) => a.value)

    svg
        .append('text')
        .attr('class', 'label')
        .attr('x', -(height / 2) - margin)
        .attr('y', margin / 2.4)
        .attr('transform', 'rotate(-90)')
        .attr('text-anchor', 'middle')
        .text('Count')

    svg.append('text')
        .attr('class', 'label')
        .attr('x', width / 2 + margin)
        .attr('y', height + margin * 1.7)
        .attr('text-anchor', 'middle')
        .text('Transaction Type')

    svg.append('text')
        .attr('class', 'title')
        .attr('x', width / 2 + margin)
        .attr('y', 40)
        .attr('text-anchor', 'middle')
        .text('Contact Applications Grouped By Transaction Type')

</script>

<!--Pie Chart, Users grouped by enterance MONTH:-->
<script>
    const MonthsData = @Html.Raw(ViewData["UsersAfterGroupByEnteranceMonth"]);
    console.log(MonthsData);

    // set the dimensions and margins of the graph
    width = 750 // Declared in script section above
    height = 600 // Declared in script section above
    margin = 40 // Declared in script section above
    var padding = 50;

    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = Math.min(width, height) / 2 - margin

    // append the svg object to the div called 'month_pie_chart'
    const svgDountChartUsersByMonth = d3.select("#month_pie_chart")
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    // set the color scale
    var color = d3.scaleOrdinal()
        .domain(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"])
        .range(d3.schemeDark2)

    // Compute the position of each group on the pie:
    var pie = d3.pie()
        .sort(null) // Do not sort group by size
        .value(function (d) {return d.value; })
    var data_ready = pie(d3.entries(MonthsData))

    // The arc generator
    var arc = d3.arc()
        .innerRadius(radius * 0.5) // This is the size of the donut hole
        .outerRadius(radius * 0.8)

    // Another arc that won't be drawn. Just for labels positioning
    var outerArc = d3.arc()
        .innerRadius(radius * 0.9)
        .outerRadius(radius * 0.9)

    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svgDountChartUsersByMonth
        .selectAll('allSlices')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', arc)
        .attr('fill', function(d) { return (color(d.data.key)) })
        .attr("stroke", "white") // Line between different colors in the chart
        .style("stroke-width", "2px")
        .style("opacity", 0.7)

    // Add the polylines between chart and labels:
    svgDountChartUsersByMonth
        .selectAll('allPolylines')
        .data(data_ready)
        .enter()
        .append('polyline')
        .attr("stroke", function (d) {
            if (d.data.value == 0) {
                return "none"; // No users this month - than we dont draw a lable for this month
            }
            return "black";
        })
        .style("fill", "none")
        .attr("stroke-width", 1)
        .attr('points', function (d) {
            var posA = arc.centroid(d) // line insertion in the slice
            var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
            var posC = outerArc.centroid(d); // Label position = almost the same as posB
            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
            return [posA, posB, posC]
        })

    // Add the polylines between chart and labels:
    svgDountChartUsersByMonth
        .selectAll('allLabels')
        .data(data_ready)
        .enter()
        .append('text')
        .text(function (d) {
            if (d.data.value == 0) {
                return ''; // No Users this month, in order to not show any text on this month's lable
            }
            if (d.data.value == 1) {
                return `${d.data.key}: ${d.data.value} User`; // Single User, no "Users"
            }
            return `${d.data.key}: ${d.data.value} Users`;
        })
        .attr('transform', function (d) {
            var pos = outerArc.centroid(d);
            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
            pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
            return 'translate(' + pos + ')';
        })
        .style('fill', 'black')
        .style('text-anchor', function (d) {
            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
            return (midangle < Math.PI ? 'start' : 'end')
        })

    svgDountChartUsersByMonth
        .append('text')
        .attr('class', 'title')
        .style('fill', 'black')
        .attr('x', margin)
        .attr('y', 0 - ( (height / 2) - (margin / 2) ))
        .attr('text-anchor', 'middle')
        .style("text-decoration", "underline")  
        .text('Users Grouped By Entrance Month')

</script>